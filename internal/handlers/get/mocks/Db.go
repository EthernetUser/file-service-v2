// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	database "file-service/m/internal/database"

	mock "github.com/stretchr/testify/mock"
)

// Db is an autogenerated mock type for the Db type
type Db struct {
	mock.Mock
}

// GetFile provides a mock function with given fields: id, isDeleted
func (_m *Db) GetFile(id int64, isDeleted bool) (*database.File, error) {
	ret := _m.Called(id, isDeleted)

	if len(ret) == 0 {
		panic("no return value specified for GetFile")
	}

	var r0 *database.File
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, bool) (*database.File, error)); ok {
		return rf(id, isDeleted)
	}
	if rf, ok := ret.Get(0).(func(int64, bool) *database.File); ok {
		r0 = rf(id, isDeleted)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.File)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, bool) error); ok {
		r1 = rf(id, isDeleted)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDb creates a new instance of Db. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDb(t interface {
	mock.TestingT
	Cleanup(func())
}) *Db {
	mock := &Db{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
